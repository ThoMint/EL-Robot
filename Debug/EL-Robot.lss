
EL-Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800100  00800100  00000c56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a7  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db7  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f01  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00004120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c2  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3c  00000000  00000000  00004c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000588a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_16>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_20>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__vector_31>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_35>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 33       	cpi	r26, 0x30	; 48
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 84 05 	call	0xb08	; 0xb08 <main>
  cc:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <set_fuses>:
			driveSpeed(0,0);
			return 1;
		}
	}
	return 0;
}
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	85 bf       	out	0x35, r24	; 53
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	85 bf       	out	0x35, r24	; 53
  e0:	e1 e6       	ldi	r30, 0x61	; 97
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
  e8:	10 82       	st	Z, r1
  ea:	10 82       	st	Z, r1
  ec:	10 82       	st	Z, r1
  ee:	10 82       	st	Z, r1
  f0:	08 95       	ret

000000f2 <pwm_timer>:
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	a0 ec       	ldi	r26, 0xC0	; 192
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
 100:	e2 ec       	ldi	r30, 0xC2	; 194
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 83       	st	Z, r24
 10a:	c3 ec       	ldi	r28, 0xC3	; 195
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	88 81       	ld	r24, Y
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	88 83       	st	Y, r24
 114:	88 81       	ld	r24, Y
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	88 83       	st	Y, r24
 11a:	8c 91       	ld	r24, X
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	8c 93       	st	X, r24
 120:	8c 91       	ld	r24, X
 122:	80 62       	ori	r24, 0x20	; 32
 124:	8c 93       	st	X, r24
 126:	80 81       	ld	r24, Z
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	80 83       	st	Z, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	80 83       	st	Z, r24
 132:	ef eb       	ldi	r30, 0xBF	; 191
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
 13a:	88 ee       	ldi	r24, 0xE8	; 232
 13c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
 140:	10 82       	st	Z, r1
 142:	8e e5       	ldi	r24, 0x5E	; 94
 144:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
 148:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 60       	ori	r24, 0x08	; 8
 154:	80 83       	st	Z, r24
 156:	80 81       	ld	r24, Z
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	80 83       	st	Z, r24
 15c:	80 81       	ld	r24, Z
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <timer_init>:
 16e:	ee e6       	ldi	r30, 0x6E	; 110
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
 178:	85 b5       	in	r24, 0x25	; 37
 17a:	83 60       	ori	r24, 0x03	; 3
 17c:	85 bd       	out	0x25, r24	; 37
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	86 bd       	out	0x26, r24	; 38
 182:	ef e6       	ldi	r30, 0x6F	; 111
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	81 62       	ori	r24, 0x21	; 33
 18a:	80 83       	st	Z, r24
 18c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 190:	b5 9a       	sbi	0x16, 5	; 22
 192:	e1 e8       	ldi	r30, 0x81	; 129
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 83       	st	Z, r24
 19c:	80 81       	ld	r24, Z
 19e:	8f 7b       	andi	r24, 0xBF	; 191
 1a0:	80 83       	st	Z, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	36 e0       	ldi	r19, 0x06	; 6
 1ac:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1b0:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 1b4:	e1 e7       	ldi	r30, 0x71	; 113
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 62       	ori	r24, 0x21	; 33
 1bc:	80 83       	st	Z, r24
 1be:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
 1c2:	c5 9a       	sbi	0x18, 5	; 24
 1c4:	e1 e9       	ldi	r30, 0x91	; 145
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	80 83       	st	Z, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	80 83       	st	Z, r24
 1da:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 1de:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
 1e2:	08 95       	ret

000001e4 <init>:
 1e4:	84 b1       	in	r24, 0x04	; 4
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 b9       	out	0x04, r24	; 4
 1ea:	15 b8       	out	0x05, r1	; 5
 1ec:	8a b1       	in	r24, 0x0a	; 10
 1ee:	88 6e       	ori	r24, 0xE8	; 232
 1f0:	8a b9       	out	0x0a, r24	; 10
 1f2:	80 b3       	in	r24, 0x10	; 16
 1f4:	80 6e       	ori	r24, 0xE0	; 224
 1f6:	80 bb       	out	0x10, r24	; 16
 1f8:	3e 9a       	sbi	0x07, 6	; 7
 1fa:	76 9a       	sbi	0x0e, 6	; 14
 1fc:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <millis>
 200:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <millis+0x1>
 204:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <millis+0x2>
 208:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <millis+0x3>
 20c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightWheelMicroS>
 210:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rightWheelMicroS+0x1>
 214:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rightWheelMicroS+0x2>
 218:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rightWheelMicroS+0x3>
 21c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <leftWheelMicroS>
 220:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <leftWheelMicroS+0x1>
 224:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <leftWheelMicroS+0x2>
 228:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <leftWheelMicroS+0x3>
 22c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightWheelSpeed+0x1>
 230:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightWheelSpeed>
 234:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <leftWheelSpeed+0x1>
 238:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <leftWheelSpeed>
 23c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rightWheelDist+0x1>
 240:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rightWheelDist>
 244:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <leftWheelDist+0x1>
 248:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <leftWheelDist>
 24c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rightWheelThrottle+0x1>
 250:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rightWheelThrottle>
 254:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <leftWheelThrottle+0x1>
 258:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <leftWheelThrottle>
 25c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <nextTimedEventBatteryState>
 260:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <nextTimedEventBatteryState+0x1>
 264:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <nextTimedEventBatteryState+0x2>
 268:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <nextTimedEventBatteryState+0x3>
 26c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <nextTimedEventAccelLeftLF>
 270:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <nextTimedEventAccelLeftLF+0x1>
 274:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <nextTimedEventAccelLeftLF+0x2>
 278:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <nextTimedEventAccelLeftLF+0x3>
 27c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <nextTimedEventAccelRightLF>
 280:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <nextTimedEventAccelRightLF+0x1>
 284:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <nextTimedEventAccelRightLF+0x2>
 288:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <nextTimedEventAccelRightLF+0x3>
 28c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <leftRefLF+0x1>
 290:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <leftRefLF>
 294:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 298:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 29c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <leftThrLF+0x1>
 2a0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <leftThrLF>
 2a4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <rightThrLF+0x1>
 2a8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rightThrLF>
 2ac:	0e 94 79 00 	call	0xf2	; 0xf2 <pwm_timer>
 2b0:	0e 94 b7 00 	call	0x16e	; 0x16e <timer_init>
 2b4:	08 95       	ret

000002b6 <I2C_init>:
 2b6:	ec eb       	ldi	r30, 0xBC	; 188
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	84 6a       	ori	r24, 0xA4	; 164
 2be:	80 83       	st	Z, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	ec f7       	brge	.-6      	; 0x2c0 <I2C_init+0xa>
 2c6:	80 e4       	ldi	r24, 0x40	; 64
 2c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2cc:	84 e8       	ldi	r24, 0x84	; 132
 2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2d2:	ec eb       	ldi	r30, 0xBC	; 188
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	88 23       	and	r24, r24
 2da:	ec f7       	brge	.-6      	; 0x2d6 <I2C_init+0x20>
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2e2:	84 e8       	ldi	r24, 0x84	; 132
 2e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2e8:	ec eb       	ldi	r30, 0xBC	; 188
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	ec f7       	brge	.-6      	; 0x2ec <I2C_init+0x36>
 2f2:	8a e2       	ldi	r24, 0x2A	; 42
 2f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2f8:	84 e8       	ldi	r24, 0x84	; 132
 2fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	88 23       	and	r24, r24
 306:	ec f7       	brge	.-6      	; 0x302 <I2C_init+0x4c>
 308:	ec eb       	ldi	r30, 0xBC	; 188
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	84 69       	ori	r24, 0x94	; 148
 310:	80 83       	st	Z, r24
 312:	80 81       	ld	r24, Z
 314:	84 6a       	ori	r24, 0xA4	; 164
 316:	80 83       	st	Z, r24
 318:	80 81       	ld	r24, Z
 31a:	88 23       	and	r24, r24
 31c:	ec f7       	brge	.-6      	; 0x318 <I2C_init+0x62>
 31e:	80 e4       	ldi	r24, 0x40	; 64
 320:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 324:	84 e8       	ldi	r24, 0x84	; 132
 326:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 32a:	ec eb       	ldi	r30, 0xBC	; 188
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	88 23       	and	r24, r24
 332:	ec f7       	brge	.-6      	; 0x32e <I2C_init+0x78>
 334:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 33e:	ec eb       	ldi	r30, 0xBC	; 188
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	ec f7       	brge	.-6      	; 0x342 <I2C_init+0x8c>
 348:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 34c:	84 e8       	ldi	r24, 0x84	; 132
 34e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 352:	ec eb       	ldi	r30, 0xBC	; 188
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	88 23       	and	r24, r24
 35a:	ec f7       	brge	.-6      	; 0x356 <I2C_init+0xa0>
 35c:	ec eb       	ldi	r30, 0xBC	; 188
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	84 69       	ori	r24, 0x94	; 148
 364:	80 83       	st	Z, r24
 366:	08 95       	ret

00000368 <drive>:
 368:	91 95       	neg	r25
 36a:	81 95       	neg	r24
 36c:	91 09       	sbc	r25, r1
 36e:	85 36       	cpi	r24, 0x65	; 101
 370:	91 05       	cpc	r25, r1
 372:	14 f0       	brlt	.+4      	; 0x378 <drive+0x10>
 374:	84 e6       	ldi	r24, 0x64	; 100
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	26 2f       	mov	r18, r22
 37a:	37 2f       	mov	r19, r23
 37c:	25 36       	cpi	r18, 0x65	; 101
 37e:	31 05       	cpc	r19, r1
 380:	14 f0       	brlt	.+4      	; 0x386 <drive+0x1e>
 382:	24 e6       	ldi	r18, 0x64	; 100
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	8c 39       	cpi	r24, 0x9C	; 156
 388:	4f ef       	ldi	r20, 0xFF	; 255
 38a:	94 07       	cpc	r25, r20
 38c:	14 f4       	brge	.+4      	; 0x392 <drive+0x2a>
 38e:	8c e9       	ldi	r24, 0x9C	; 156
 390:	9f ef       	ldi	r25, 0xFF	; 255
 392:	ac 01       	movw	r20, r24
 394:	4c 59       	subi	r20, 0x9C	; 156
 396:	5f 4f       	sbci	r21, 0xFF	; 255
 398:	6f e3       	ldi	r22, 0x3F	; 63
 39a:	64 9f       	mul	r22, r20
 39c:	c0 01       	movw	r24, r0
 39e:	65 9f       	mul	r22, r21
 3a0:	90 0d       	add	r25, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	68 ec       	ldi	r22, 0xC8	; 200
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	0e 94 96 05 	call	0xb2c	; 0xb2c <__divmodhi4>
 3ac:	ab 01       	movw	r20, r22
 3ae:	42 5c       	subi	r20, 0xC2	; 194
 3b0:	5f 4f       	sbci	r21, 0xFF	; 255
 3b2:	2c 39       	cpi	r18, 0x9C	; 156
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	38 07       	cpc	r19, r24
 3b8:	14 f4       	brge	.+4      	; 0x3be <drive+0x56>
 3ba:	2c e9       	ldi	r18, 0x9C	; 156
 3bc:	3f ef       	ldi	r19, 0xFF	; 255
 3be:	2c 59       	subi	r18, 0x9C	; 156
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	5f e3       	ldi	r21, 0x3F	; 63
 3c4:	52 9f       	mul	r21, r18
 3c6:	c0 01       	movw	r24, r0
 3c8:	53 9f       	mul	r21, r19
 3ca:	90 0d       	add	r25, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	68 ec       	ldi	r22, 0xC8	; 200
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	0e 94 96 05 	call	0xb2c	; 0xb2c <__divmodhi4>
 3d6:	62 5c       	subi	r22, 0xC2	; 194
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	ef eb       	ldi	r30, 0xBF	; 191
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	10 82       	st	Z, r1
 3e0:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>
 3e4:	10 82       	st	Z, r1
 3e6:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
 3ea:	08 95       	ret

000003ec <adc_measure>:

unsigned int adc_measure(unsigned char channel)
{
	unsigned int result=0;
	
	ADMUX = 0;
 3ec:	ec e7       	ldi	r30, 0x7C	; 124
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	10 82       	st	Z, r1
	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//Ext. AREF = 5V
 3f2:	90 81       	ld	r25, Z
 3f4:	9f 73       	andi	r25, 0x3F	; 63
 3f6:	90 83       	st	Z, r25
	ADMUX &= ~(1<<ADLAR);						//10bit
 3f8:	90 81       	ld	r25, Z
 3fa:	9f 7d       	andi	r25, 0xDF	; 223
 3fc:	90 83       	st	Z, r25
	
	ADCSRB &= ~(1<<MUX5);
 3fe:	ab e7       	ldi	r26, 0x7B	; 123
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	9c 91       	ld	r25, X
 404:	9f 7d       	andi	r25, 0xDF	; 223
 406:	9c 93       	st	X, r25
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3)&~(1<<MUX2)&~(1<<MUX1);
 408:	90 81       	ld	r25, Z
 40a:	91 7e       	andi	r25, 0xE1	; 225
 40c:	90 83       	st	Z, r25
	ADMUX |= channel;
 40e:	90 81       	ld	r25, Z
 410:	89 2b       	or	r24, r25
 412:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//ADC on, Prescaler to 128 -> 125kHz Samplingfrequency
 414:	ea e7       	ldi	r30, 0x7A	; 122
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	87 68       	ori	r24, 0x87	; 135
 41c:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);						//Start
 41e:	80 81       	ld	r24, Z
 420:	80 64       	ori	r24, 0x40	; 64
 422:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));					//Wait till the conversion is complete
 424:	80 81       	ld	r24, Z
 426:	86 fd       	sbrc	r24, 6
 428:	fd cf       	rjmp	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	result = ADCW;
 42a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 42e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	return result;
}
 432:	08 95       	ret

00000434 <lineFollower_init>:
	TCNT3 = 0x600;			//Initial value to 1536
}

void lineFollower_init(void)
{
	PORTD |= LF_EMITTER;	//Turn on the Emitters
 434:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	81 ee       	ldi	r24, 0xE1	; 225
 43a:	94 e0       	ldi	r25, 0x04	; 4
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <lineFollower_init+0x8>
 444:	00 c0       	rjmp	.+0      	; 0x446 <lineFollower_init+0x12>
 446:	00 00       	nop
	_delay_ms(100);
	//Measure the reference of the brighter background
	leftRefLF = adc_measure(ADC_LF_LEFT);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <adc_measure>
 44e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <leftRefLF+0x1>
 452:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <leftRefLF>
	rightRefLF = adc_measure(ADC_LF_RIGHT);
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	0e 94 f6 01 	call	0x3ec	; 0x3ec <adc_measure>
 45c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 460:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 464:	08 95       	ret

00000466 <getBatteryStatus>:
	result = ADCW;
	return result;
}

int getBatteryStatus()
{
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	c9 e1       	ldi	r28, 0x19	; 25
 470:	d0 e0       	ldi	r29, 0x00	; 0
	//25 Samples, 1 average value
	unsigned int batteryVoltage = 0;
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0;i<25;i++)
	{
		batteryVoltage+=adc_measure(0x00);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 f6 01 	call	0x3ec	; 0x3ec <adc_measure>
 47c:	08 0f       	add	r16, r24
 47e:	19 1f       	adc	r17, r25
 480:	21 97       	sbiw	r28, 0x01	; 1

int getBatteryStatus()
{
	//25 Samples, 1 average value
	unsigned int batteryVoltage = 0;
	for(int i=0;i<25;i++)
 482:	c9 f7       	brne	.-14     	; 0x476 <getBatteryStatus+0x10>
	{
		batteryVoltage+=adc_measure(0x00);
	}
	batteryVoltage/=25;
 484:	98 01       	movw	r18, r16
 486:	af ea       	ldi	r26, 0xAF	; 175
 488:	b7 e4       	ldi	r27, 0x47	; 71
 48a:	0e 94 cc 05 	call	0xb98	; 0xb98 <__umulhisi3>
 48e:	08 1b       	sub	r16, r24
 490:	19 0b       	sbc	r17, r25
 492:	16 95       	lsr	r17
 494:	07 95       	ror	r16
 496:	80 0f       	add	r24, r16
 498:	91 1f       	adc	r25, r17
 49a:	92 95       	swap	r25
 49c:	82 95       	swap	r24
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	89 27       	eor	r24, r25
 4a2:	9f 70       	andi	r25, 0x0F	; 15
 4a4:	89 27       	eor	r24, r25
	
	if(batteryVoltage<=UREF1 && batteryVoltage>UREF2)
 4a6:	9c 01       	movw	r18, r24
 4a8:	2c 56       	subi	r18, 0x6C	; 108
 4aa:	33 40       	sbci	r19, 0x03	; 3
 4ac:	22 36       	cpi	r18, 0x62	; 98
 4ae:	31 05       	cpc	r19, r1
 4b0:	58 f0       	brcs	.+22     	; 0x4c8 <getBatteryStatus+0x62>
	{
		return 1;	//8.4V - 7.6V
	}
	else if(batteryVoltage<=UREF2 && batteryVoltage>UREF3)
 4b2:	29 58       	subi	r18, 0x89	; 137
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	27 37       	cpi	r18, 0x77	; 119
 4b8:	31 05       	cpc	r19, r1
 4ba:	48 f0       	brcs	.+18     	; 0x4ce <getBatteryStatus+0x68>
	{
		return 2;	//7.6V - 6.6V
	}
	else if(batteryVoltage<=UREF3)
 4bc:	85 3f       	cpi	r24, 0xF5	; 245
 4be:	92 40       	sbci	r25, 0x02	; 2
 4c0:	48 f0       	brcs	.+18     	; 0x4d4 <getBatteryStatus+0x6e>
	{
		return 3;	// < 6.6V
	}else
	{
		return -1;	//Battery over voltage !!!
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	9f ef       	ldi	r25, 0xFF	; 255
 4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <getBatteryStatus+0x72>
	}
	batteryVoltage/=25;
	
	if(batteryVoltage<=UREF1 && batteryVoltage>UREF2)
	{
		return 1;	//8.4V - 7.6V
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <getBatteryStatus+0x72>
	}
	else if(batteryVoltage<=UREF2 && batteryVoltage>UREF3)
	{
		return 2;	//7.6V - 6.6V
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <getBatteryStatus+0x72>
	}
	else if(batteryVoltage<=UREF3)
	{
		return 3;	// < 6.6V
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	90 e0       	ldi	r25, 0x00	; 0
	}else
	{
		return -1;	//Battery over voltage !!!
	}
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	08 95       	ret

000004e2 <showBatteryStatus>:

void showBatteryStatus()
{
	if(millis > nextTimedEventBatteryState)
 4e2:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <millis>
 4e6:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <millis+0x1>
 4ea:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <millis+0x2>
 4ee:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <millis+0x3>
 4f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <nextTimedEventBatteryState>
 4f6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <nextTimedEventBatteryState+0x1>
 4fa:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <nextTimedEventBatteryState+0x2>
 4fe:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <nextTimedEventBatteryState+0x3>
 502:	84 17       	cp	r24, r20
 504:	95 07       	cpc	r25, r21
 506:	a6 07       	cpc	r26, r22
 508:	b7 07       	cpc	r27, r23
 50a:	08 f0       	brcs	.+2      	; 0x50e <showBatteryStatus+0x2c>
 50c:	62 c0       	rjmp	.+196    	; 0x5d2 <showBatteryStatus+0xf0>
	{
		switch(getBatteryStatus())
 50e:	0e 94 33 02 	call	0x466	; 0x466 <getBatteryStatus>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	91 05       	cpc	r25, r1
 516:	e9 f0       	breq	.+58     	; 0x552 <showBatteryStatus+0x70>
 518:	83 30       	cpi	r24, 0x03	; 3
 51a:	91 05       	cpc	r25, r1
 51c:	91 f1       	breq	.+100    	; 0x582 <showBatteryStatus+0xa0>
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	09 f0       	breq	.+2      	; 0x524 <showBatteryStatus+0x42>
 522:	57 c0       	rjmp	.+174    	; 0x5d2 <showBatteryStatus+0xf0>
		{
			case 1:
			PORTB |= (1<<PINB4);							//green LED on
 524:	2c 9a       	sbi	0x05, 4	; 5
			PORTB &= ~(1<<PINB5);							//red LED off
 526:	2d 98       	cbi	0x05, 5	; 5
			nextTimedEventBatteryState = millis + 1000;		//update every second
 528:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis>
 52c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis+0x1>
 530:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis+0x2>
 534:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis+0x3>
 538:	88 51       	subi	r24, 0x18	; 24
 53a:	9c 4f       	sbci	r25, 0xFC	; 252
 53c:	af 4f       	sbci	r26, 0xFF	; 255
 53e:	bf 4f       	sbci	r27, 0xFF	; 255
 540:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <nextTimedEventBatteryState>
 544:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <nextTimedEventBatteryState+0x1>
 548:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <nextTimedEventBatteryState+0x2>
 54c:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <nextTimedEventBatteryState+0x3>
			break;
 550:	08 95       	ret
			case 2:
			PORTB |= ((1<<PINB5)|(1<<PINB4));				//green and red LED on
 552:	85 b1       	in	r24, 0x05	; 5
 554:	80 63       	ori	r24, 0x30	; 48
 556:	85 b9       	out	0x05, r24	; 5
			nextTimedEventBatteryState = millis + 1000;		//update every second
 558:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis>
 55c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis+0x1>
 560:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis+0x2>
 564:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis+0x3>
 568:	88 51       	subi	r24, 0x18	; 24
 56a:	9c 4f       	sbci	r25, 0xFC	; 252
 56c:	af 4f       	sbci	r26, 0xFF	; 255
 56e:	bf 4f       	sbci	r27, 0xFF	; 255
 570:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <nextTimedEventBatteryState>
 574:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <nextTimedEventBatteryState+0x1>
 578:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <nextTimedEventBatteryState+0x2>
 57c:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <nextTimedEventBatteryState+0x3>
			break;
 580:	08 95       	ret
			case 3:
			PORTB &= ~(1<<PINB4);							//green LED off
 582:	2c 98       	cbi	0x05, 4	; 5
			PORTB ^= (1<<PINB5);							//Toggle red LED on/off
 584:	95 b1       	in	r25, 0x05	; 5
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	89 27       	eor	r24, r25
 58a:	85 b9       	out	0x05, r24	; 5
			nextTimedEventBatteryState = (PORTB & (1<<PINB5)) ? (millis + 100) : (millis + 4000);	//100ms on, 4000ms off
 58c:	2d 9b       	sbis	0x05, 5	; 5
 58e:	0d c0       	rjmp	.+26     	; 0x5aa <showBatteryStatus+0xc8>
 590:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis>
 594:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis+0x1>
 598:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis+0x2>
 59c:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis+0x3>
 5a0:	8c 59       	subi	r24, 0x9C	; 156
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	af 4f       	sbci	r26, 0xFF	; 255
 5a6:	bf 4f       	sbci	r27, 0xFF	; 255
 5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <showBatteryStatus+0xe0>
 5aa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis>
 5ae:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis+0x1>
 5b2:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis+0x2>
 5b6:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis+0x3>
 5ba:	80 56       	subi	r24, 0x60	; 96
 5bc:	90 4f       	sbci	r25, 0xF0	; 240
 5be:	af 4f       	sbci	r26, 0xFF	; 255
 5c0:	bf 4f       	sbci	r27, 0xFF	; 255
 5c2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <nextTimedEventBatteryState>
 5c6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <nextTimedEventBatteryState+0x1>
 5ca:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <nextTimedEventBatteryState+0x2>
 5ce:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <nextTimedEventBatteryState+0x3>
 5d2:	08 95       	ret

000005d4 <followLine>:
		}
	}
}

void followLine(void)
{
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
	int left = adc_measure(ADC_LF_LEFT);
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 f6 01 	call	0x3ec	; 0x3ec <adc_measure>
 5e2:	ec 01       	movw	r28, r24
	int right = adc_measure(ADC_LF_RIGHT);
 5e4:	84 e0       	ldi	r24, 0x04	; 4
 5e6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <adc_measure>
	
	if(left<leftRefLF-LF_TOLERANCE)		//Darker line than background detected
 5ea:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <leftRefLF>
 5ee:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <leftRefLF+0x1>
 5f2:	22 53       	subi	r18, 0x32	; 50
 5f4:	31 09       	sbc	r19, r1
 5f6:	c2 17       	cp	r28, r18
 5f8:	d3 07       	cpc	r29, r19
 5fa:	0c f0       	brlt	.+2      	; 0x5fe <followLine+0x2a>
 5fc:	46 c0       	rjmp	.+140    	; 0x68a <followLine+0xb6>
	{
		//rightThr = 15;
		if(millis>nextTimedEventAccelRightLF)
 5fe:	00 91 2c 01 	lds	r16, 0x012C	; 0x80012c <millis>
 602:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <millis+0x1>
 606:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <millis+0x2>
 60a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <millis+0x3>
 60e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <nextTimedEventAccelRightLF>
 612:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <nextTimedEventAccelRightLF+0x1>
 616:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <nextTimedEventAccelRightLF+0x2>
 61a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <nextTimedEventAccelRightLF+0x3>
 61e:	40 17       	cp	r20, r16
 620:	51 07       	cpc	r21, r17
 622:	62 07       	cpc	r22, r18
 624:	73 07       	cpc	r23, r19
 626:	f0 f4       	brcc	.+60     	; 0x664 <followLine+0x90>
		{
			rightThrLF++;	//Accelerate slowly, otherwise the robot does a wheelie and loses track
 628:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <rightThrLF>
 62c:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <rightThrLF+0x1>
 630:	2f 5f       	subi	r18, 0xFF	; 255
 632:	3f 4f       	sbci	r19, 0xFF	; 255
 634:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <rightThrLF+0x1>
 638:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <rightThrLF>
			nextTimedEventAccelRightLF=millis+LF_ACCEL;
 63c:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <millis>
 640:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <millis+0x1>
 644:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <millis+0x2>
 648:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <millis+0x3>
 64c:	4e 5c       	subi	r20, 0xCE	; 206
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	6f 4f       	sbci	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <nextTimedEventAccelRightLF>
 658:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <nextTimedEventAccelRightLF+0x1>
 65c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <nextTimedEventAccelRightLF+0x2>
 660:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <nextTimedEventAccelRightLF+0x3>
		}
		rightThrLF = rightThrLF>LF_TOP_SPEED ? LF_TOP_SPEED:rightThrLF;
 664:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <rightThrLF>
 668:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <rightThrLF+0x1>
 66c:	23 33       	cpi	r18, 0x33	; 51
 66e:	31 05       	cpc	r19, r1
 670:	2c f4       	brge	.+10     	; 0x67c <followLine+0xa8>
 672:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <rightThrLF>
 676:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <rightThrLF+0x1>
 67a:	02 c0       	rjmp	.+4      	; 0x680 <followLine+0xac>
 67c:	22 e3       	ldi	r18, 0x32	; 50
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <rightThrLF+0x1>
 684:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <rightThrLF>
 688:	04 c0       	rjmp	.+8      	; 0x692 <followLine+0xbe>
	}
	else
	{
		rightThrLF = 0;	//Stop
 68a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <rightThrLF+0x1>
 68e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rightThrLF>
	}
	
	if(right<rightRefLF-LF_TOLERANCE)	//Darker line than background detected
 692:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 696:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 69a:	22 53       	subi	r18, 0x32	; 50
 69c:	31 09       	sbc	r19, r1
 69e:	82 17       	cp	r24, r18
 6a0:	93 07       	cpc	r25, r19
 6a2:	0c f0       	brlt	.+2      	; 0x6a6 <followLine+0xd2>
 6a4:	43 c0       	rjmp	.+134    	; 0x72c <followLine+0x158>
	{
		//leftThr = 15;
		if(millis>nextTimedEventAccelLeftLF)
 6a6:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <millis>
 6aa:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <millis+0x1>
 6ae:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <millis+0x2>
 6b2:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <millis+0x3>
 6b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <nextTimedEventAccelLeftLF>
 6ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <nextTimedEventAccelLeftLF+0x1>
 6be:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <nextTimedEventAccelLeftLF+0x2>
 6c2:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <nextTimedEventAccelLeftLF+0x3>
 6c6:	84 17       	cp	r24, r20
 6c8:	95 07       	cpc	r25, r21
 6ca:	a6 07       	cpc	r26, r22
 6cc:	b7 07       	cpc	r27, r23
 6ce:	e0 f4       	brcc	.+56     	; 0x708 <followLine+0x134>
		{
			leftThrLF++;	//Accelerate slowly, otherwise the robot does a wheelie and loses track
 6d0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <leftThrLF>
 6d4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <leftThrLF+0x1>
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <leftThrLF+0x1>
 6de:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <leftThrLF>
			nextTimedEventAccelLeftLF=millis+LF_ACCEL;
 6e2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis>
 6e6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis+0x1>
 6ea:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis+0x2>
 6ee:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis+0x3>
 6f2:	c2 96       	adiw	r24, 0x32	; 50
 6f4:	a1 1d       	adc	r26, r1
 6f6:	b1 1d       	adc	r27, r1
 6f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <nextTimedEventAccelLeftLF>
 6fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <nextTimedEventAccelLeftLF+0x1>
 700:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <nextTimedEventAccelLeftLF+0x2>
 704:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <nextTimedEventAccelLeftLF+0x3>
		}
		leftThrLF = leftThrLF>LF_TOP_SPEED ? LF_TOP_SPEED:leftThrLF;
 708:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <leftThrLF>
 70c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <leftThrLF+0x1>
 710:	c3 97       	sbiw	r24, 0x33	; 51
 712:	2c f4       	brge	.+10     	; 0x71e <followLine+0x14a>
 714:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <leftThrLF>
 718:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <leftThrLF+0x1>
 71c:	02 c0       	rjmp	.+4      	; 0x722 <followLine+0x14e>
 71e:	82 e3       	ldi	r24, 0x32	; 50
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <leftThrLF+0x1>
 726:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <leftThrLF>
 72a:	04 c0       	rjmp	.+8      	; 0x734 <followLine+0x160>
	}
	else
	{
		leftThrLF = 0;	//stop
 72c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <leftThrLF+0x1>
 730:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <leftThrLF>
	}
	
	drive(leftThrLF,rightThrLF);
 734:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <rightThrLF>
 738:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <rightThrLF+0x1>
 73c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <leftThrLF>
 740:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <leftThrLF+0x1>
 744:	0e 94 b4 01 	call	0x368	; 0x368 <drive>
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	08 95       	ret

00000752 <__vector_23>:

//Triggered when timer 0 overflows every millisecond, millis is used for timing of different tasks
ISR(TIMER0_OVF_vect)
{
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	8f 93       	push	r24
 75e:	9f 93       	push	r25
 760:	af 93       	push	r26
 762:	bf 93       	push	r27
	millis++;
 764:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis>
 768:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis+0x1>
 76c:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis+0x2>
 770:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis+0x3>
 774:	01 96       	adiw	r24, 0x01	; 1
 776:	a1 1d       	adc	r26, r1
 778:	b1 1d       	adc	r27, r1
 77a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <millis>
 77e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <millis+0x1>
 782:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <millis+0x2>
 786:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <millis+0x3>
	TCNT0 = 0x06;
 78a:	86 e0       	ldi	r24, 0x06	; 6
 78c:	86 bd       	out	0x26, r24	; 38
}
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_20>:

//Triggered when the timer of the right wheel overflows, add 32 ms to the measured time
ISR(TIMER1_OVF_vect)
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
	rightWheelMicroS += 32000;
 7b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rightWheelMicroS>
 7b6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rightWheelMicroS+0x1>
 7ba:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <rightWheelMicroS+0x2>
 7be:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <rightWheelMicroS+0x3>
 7c2:	93 58       	subi	r25, 0x83	; 131
 7c4:	af 4f       	sbci	r26, 0xFF	; 255
 7c6:	bf 4f       	sbci	r27, 0xFF	; 255
 7c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rightWheelMicroS>
 7cc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rightWheelMicroS+0x1>
 7d0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <rightWheelMicroS+0x2>
 7d4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <rightWheelMicroS+0x3>
	TCNT1 = 0x600;	//Initial value to 1536
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	96 e0       	ldi	r25, 0x06	; 6
 7dc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 7e0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_35>:

//Triggered when the timer of the left wheel overflows, add 32 ms to the measured time
ISR(TIMER3_OVF_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	8f 93       	push	r24
 802:	9f 93       	push	r25
 804:	af 93       	push	r26
 806:	bf 93       	push	r27
	leftWheelMicroS += 32000;
 808:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <leftWheelMicroS>
 80c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <leftWheelMicroS+0x1>
 810:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <leftWheelMicroS+0x2>
 814:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <leftWheelMicroS+0x3>
 818:	93 58       	subi	r25, 0x83	; 131
 81a:	af 4f       	sbci	r26, 0xFF	; 255
 81c:	bf 4f       	sbci	r27, 0xFF	; 255
 81e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <leftWheelMicroS>
 822:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <leftWheelMicroS+0x1>
 826:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <leftWheelMicroS+0x2>
 82a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <leftWheelMicroS+0x3>
	TCNT3 = 0x600;	//Initial value to 1536
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	96 e0       	ldi	r25, 0x06	; 6
 832:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 836:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
}
 83a:	bf 91       	pop	r27
 83c:	af 91       	pop	r26
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <__vector_16>:

//Input Capture ISR
//Triggered when the right wheel detects a falling edge
//Used to measure time and calculate speed, travel a certain distance
ISR(TIMER1_CAPT_vect)
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
	//Calculate speed and traveled distance
	rightWheelMicroS += (TCNT1-0x600)/2;
 872:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 876:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 87a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <rightWheelMicroS>
 87e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <rightWheelMicroS+0x1>
 882:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <rightWheelMicroS+0x2>
 886:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <rightWheelMicroS+0x3>
 88a:	96 50       	subi	r25, 0x06	; 6
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	8a 01       	movw	r16, r20
 892:	9b 01       	movw	r18, r22
 894:	08 0f       	add	r16, r24
 896:	19 1f       	adc	r17, r25
 898:	21 1d       	adc	r18, r1
 89a:	31 1d       	adc	r19, r1
 89c:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <rightWheelMicroS>
 8a0:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <rightWheelMicroS+0x1>
 8a4:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <rightWheelMicroS+0x2>
 8a8:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <rightWheelMicroS+0x3>
	rightWheelMicroS *= 15;
 8ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rightWheelMicroS>
 8b0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rightWheelMicroS+0x1>
 8b4:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <rightWheelMicroS+0x2>
 8b8:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <rightWheelMicroS+0x3>
 8bc:	ac 01       	movw	r20, r24
 8be:	bd 01       	movw	r22, r26
 8c0:	44 0f       	add	r20, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	84 0f       	add	r24, r20
 8ca:	95 1f       	adc	r25, r21
 8cc:	a6 1f       	adc	r26, r22
 8ce:	b7 1f       	adc	r27, r23
 8d0:	ac 01       	movw	r20, r24
 8d2:	bd 01       	movw	r22, r26
 8d4:	44 0f       	add	r20, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	44 0f       	add	r20, r20
 8de:	55 1f       	adc	r21, r21
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	84 0f       	add	r24, r20
 8e6:	95 1f       	adc	r25, r21
 8e8:	a6 1f       	adc	r26, r22
 8ea:	b7 1f       	adc	r27, r23
 8ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rightWheelMicroS>
 8f0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rightWheelMicroS+0x1>
 8f4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <rightWheelMicroS+0x2>
 8f8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <rightWheelMicroS+0x3>
	rightWheelSpeed = (207 * 1000000) / rightWheelMicroS;
 8fc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rightWheelMicroS>
 900:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rightWheelMicroS+0x1>
 904:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <rightWheelMicroS+0x2>
 908:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <rightWheelMicroS+0x3>
 90c:	60 ec       	ldi	r22, 0xC0	; 192
 90e:	71 e9       	ldi	r23, 0x91	; 145
 910:	86 e5       	ldi	r24, 0x56	; 86
 912:	9c e0       	ldi	r25, 0x0C	; 12
 914:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 918:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <rightWheelSpeed+0x1>
 91c:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <rightWheelSpeed>
	rightWheelDist += 14;
 920:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rightWheelDist>
 924:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rightWheelDist+0x1>
 928:	0e 96       	adiw	r24, 0x0e	; 14
 92a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <rightWheelDist+0x1>
 92e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rightWheelDist>
	rightWheelMicroS = 0;
 932:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightWheelMicroS>
 936:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rightWheelMicroS+0x1>
 93a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rightWheelMicroS+0x2>
 93e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rightWheelMicroS+0x3>
	
	//Choose the sign of the motor depending on the throttle, not accurate at lower speeds
	//Problem: no HW way to determine the direction of the wheel
	rightWheelSpeed = rightWheelSpeed * (rightWheelThrottle<0 ? -1:1);
 942:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rightWheelThrottle>
 946:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rightWheelThrottle+0x1>
 94a:	99 23       	and	r25, r25
 94c:	1c f0       	brlt	.+6      	; 0x954 <__vector_16+0x108>
 94e:	41 e0       	ldi	r20, 0x01	; 1
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <__vector_16+0x10c>
 954:	4f ef       	ldi	r20, 0xFF	; 255
 956:	5f ef       	ldi	r21, 0xFF	; 255
 958:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <rightWheelSpeed>
 95c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <rightWheelSpeed+0x1>
 960:	42 9f       	mul	r20, r18
 962:	c0 01       	movw	r24, r0
 964:	43 9f       	mul	r20, r19
 966:	90 0d       	add	r25, r0
 968:	52 9f       	mul	r21, r18
 96a:	90 0d       	add	r25, r0
 96c:	11 24       	eor	r1, r1
 96e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rightWheelSpeed+0x1>
 972:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rightWheelSpeed>
	
	TCNT1 = 0x600;	//Initial value to 1536
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	96 e0       	ldi	r25, 0x06	; 6
 97a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 97e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//Reset the timer overflow flag register of timer 1
	//just in case if it has overflow during speed calculation
	TIFR1 |= (1<<TOV1);	
 982:	b0 9a       	sbi	0x16, 0	; 22
}
 984:	ff 91       	pop	r31
 986:	ef 91       	pop	r30
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	0f 90       	pop	r0
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	0f 90       	pop	r0
 9a6:	1f 90       	pop	r1
 9a8:	18 95       	reti

000009aa <__vector_31>:

//Input Capture ISR
//Triggered when the left wheel detects a falling edge
//Used to measure time and calculate speed, travel a certain distance
ISR(TIMER3_CAPT_vect)
{
 9aa:	1f 92       	push	r1
 9ac:	0f 92       	push	r0
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	0f 92       	push	r0
 9b2:	11 24       	eor	r1, r1
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	2f 93       	push	r18
 9ba:	3f 93       	push	r19
 9bc:	4f 93       	push	r20
 9be:	5f 93       	push	r21
 9c0:	6f 93       	push	r22
 9c2:	7f 93       	push	r23
 9c4:	8f 93       	push	r24
 9c6:	9f 93       	push	r25
 9c8:	af 93       	push	r26
 9ca:	bf 93       	push	r27
 9cc:	ef 93       	push	r30
 9ce:	ff 93       	push	r31
	//Calculate speed and traveled distance
	leftWheelMicroS += (TCNT3-0x600)/2;
 9d0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
 9d4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 9d8:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <leftWheelMicroS>
 9dc:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <leftWheelMicroS+0x1>
 9e0:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <leftWheelMicroS+0x2>
 9e4:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <leftWheelMicroS+0x3>
 9e8:	96 50       	subi	r25, 0x06	; 6
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	8a 01       	movw	r16, r20
 9f0:	9b 01       	movw	r18, r22
 9f2:	08 0f       	add	r16, r24
 9f4:	19 1f       	adc	r17, r25
 9f6:	21 1d       	adc	r18, r1
 9f8:	31 1d       	adc	r19, r1
 9fa:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <leftWheelMicroS>
 9fe:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <leftWheelMicroS+0x1>
 a02:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <leftWheelMicroS+0x2>
 a06:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <leftWheelMicroS+0x3>
	leftWheelMicroS *= 15;
 a0a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <leftWheelMicroS>
 a0e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <leftWheelMicroS+0x1>
 a12:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <leftWheelMicroS+0x2>
 a16:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <leftWheelMicroS+0x3>
 a1a:	ac 01       	movw	r20, r24
 a1c:	bd 01       	movw	r22, r26
 a1e:	44 0f       	add	r20, r20
 a20:	55 1f       	adc	r21, r21
 a22:	66 1f       	adc	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	84 0f       	add	r24, r20
 a28:	95 1f       	adc	r25, r21
 a2a:	a6 1f       	adc	r26, r22
 a2c:	b7 1f       	adc	r27, r23
 a2e:	ac 01       	movw	r20, r24
 a30:	bd 01       	movw	r22, r26
 a32:	44 0f       	add	r20, r20
 a34:	55 1f       	adc	r21, r21
 a36:	66 1f       	adc	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	44 0f       	add	r20, r20
 a3c:	55 1f       	adc	r21, r21
 a3e:	66 1f       	adc	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	84 0f       	add	r24, r20
 a44:	95 1f       	adc	r25, r21
 a46:	a6 1f       	adc	r26, r22
 a48:	b7 1f       	adc	r27, r23
 a4a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <leftWheelMicroS>
 a4e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <leftWheelMicroS+0x1>
 a52:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <leftWheelMicroS+0x2>
 a56:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <leftWheelMicroS+0x3>
	leftWheelSpeed = (207 * 1000000) / leftWheelMicroS;
 a5a:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <leftWheelMicroS>
 a5e:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <leftWheelMicroS+0x1>
 a62:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <leftWheelMicroS+0x2>
 a66:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <leftWheelMicroS+0x3>
 a6a:	60 ec       	ldi	r22, 0xC0	; 192
 a6c:	71 e9       	ldi	r23, 0x91	; 145
 a6e:	86 e5       	ldi	r24, 0x56	; 86
 a70:	9c e0       	ldi	r25, 0x0C	; 12
 a72:	0e 94 aa 05 	call	0xb54	; 0xb54 <__udivmodsi4>
 a76:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <leftWheelSpeed+0x1>
 a7a:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <leftWheelSpeed>
	leftWheelDist += 14;
 a7e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <leftWheelDist>
 a82:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <leftWheelDist+0x1>
 a86:	0e 96       	adiw	r24, 0x0e	; 14
 a88:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <leftWheelDist+0x1>
 a8c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <leftWheelDist>
	leftWheelMicroS = 0;
 a90:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <leftWheelMicroS>
 a94:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <leftWheelMicroS+0x1>
 a98:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <leftWheelMicroS+0x2>
 a9c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <leftWheelMicroS+0x3>
	
	//Choose the sign of the motor depending on the throttle, not accurate at lower speeds
	//Problem: no HW way to determine the direction of the wheel
	leftWheelSpeed = leftWheelSpeed * (leftWheelThrottle<0 ? -1:1);
 aa0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <leftWheelThrottle>
 aa4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <leftWheelThrottle+0x1>
 aa8:	99 23       	and	r25, r25
 aaa:	1c f0       	brlt	.+6      	; 0xab2 <__vector_31+0x108>
 aac:	41 e0       	ldi	r20, 0x01	; 1
 aae:	50 e0       	ldi	r21, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__vector_31+0x10c>
 ab2:	4f ef       	ldi	r20, 0xFF	; 255
 ab4:	5f ef       	ldi	r21, 0xFF	; 255
 ab6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <leftWheelSpeed>
 aba:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <leftWheelSpeed+0x1>
 abe:	42 9f       	mul	r20, r18
 ac0:	c0 01       	movw	r24, r0
 ac2:	43 9f       	mul	r20, r19
 ac4:	90 0d       	add	r25, r0
 ac6:	52 9f       	mul	r21, r18
 ac8:	90 0d       	add	r25, r0
 aca:	11 24       	eor	r1, r1
 acc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <leftWheelSpeed+0x1>
 ad0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <leftWheelSpeed>
	
	TCNT3 = 0x600;	//Initial value to 1536
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	96 e0       	ldi	r25, 0x06	; 6
 ad8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 adc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	//Reset the timer overflow flag register of timer 3
	//just in case if it has overflow during speed calculation
	TIFR3 |= (1<<TOV3);	
 ae0:	c0 9a       	sbi	0x18, 0	; 24
 ae2:	ff 91       	pop	r31
 ae4:	ef 91       	pop	r30
 ae6:	bf 91       	pop	r27
 ae8:	af 91       	pop	r26
 aea:	9f 91       	pop	r25
 aec:	8f 91       	pop	r24
 aee:	7f 91       	pop	r23
 af0:	6f 91       	pop	r22
 af2:	5f 91       	pop	r21
 af4:	4f 91       	pop	r20
 af6:	3f 91       	pop	r19
 af8:	2f 91       	pop	r18
 afa:	1f 91       	pop	r17
 afc:	0f 91       	pop	r16
 afe:	0f 90       	pop	r0
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	0f 90       	pop	r0
 b04:	1f 90       	pop	r1
 b06:	18 95       	reti

00000b08 <main>:
#include "LCD_MCP23008_16MHz.h"

int main(void)
{
	//Initialization
	set_fuses();			//JTAG disable and CPU-Speed to 16MHz
 b08:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_fuses>
	init();					//Init timers and set pin modes
 b0c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <init>
	PORTC |= IO_RESET;		//Port expander on
 b10:	46 9a       	sbi	0x08, 6	; 8
	TWBR = 12;				//TWBR=12, TWPS=0, TWSR per default,f_SCL = 400 kHz
 b12:	8c e0       	ldi	r24, 0x0C	; 12
 b14:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	I2C_init();				//I2C Initialization
 b18:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <I2C_init>
	sei();					//Global interrupt enable
 b1c:	78 94       	sei
	
	//LCD_init();
	//LCD_cmd(LCD_INIT);
	//LCD_cmd(LCD_CLEAR);
	
	lineFollower_init();
 b1e:	0e 94 1a 02 	call	0x434	; 0x434 <lineFollower_init>
	
    while(1)
    {	
		//driveSpeed(50,50);				//Drive the robot with 50mm/s
		//driveDistance(200,200,200,200);	//Drive the robot with 200mm/s for 200mm
		followLine();
 b22:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <followLine>
		showBatteryStatus();
 b26:	0e 94 71 02 	call	0x4e2	; 0x4e2 <showBatteryStatus>
 b2a:	fb cf       	rjmp	.-10     	; 0xb22 <main+0x1a>

00000b2c <__divmodhi4>:
 b2c:	97 fb       	bst	r25, 7
 b2e:	07 2e       	mov	r0, r23
 b30:	16 f4       	brtc	.+4      	; 0xb36 <__divmodhi4+0xa>
 b32:	00 94       	com	r0
 b34:	07 d0       	rcall	.+14     	; 0xb44 <__divmodhi4_neg1>
 b36:	77 fd       	sbrc	r23, 7
 b38:	09 d0       	rcall	.+18     	; 0xb4c <__divmodhi4_neg2>
 b3a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__udivmodhi4>
 b3e:	07 fc       	sbrc	r0, 7
 b40:	05 d0       	rcall	.+10     	; 0xb4c <__divmodhi4_neg2>
 b42:	3e f4       	brtc	.+14     	; 0xb52 <__divmodhi4_exit>

00000b44 <__divmodhi4_neg1>:
 b44:	90 95       	com	r25
 b46:	81 95       	neg	r24
 b48:	9f 4f       	sbci	r25, 0xFF	; 255
 b4a:	08 95       	ret

00000b4c <__divmodhi4_neg2>:
 b4c:	70 95       	com	r23
 b4e:	61 95       	neg	r22
 b50:	7f 4f       	sbci	r23, 0xFF	; 255

00000b52 <__divmodhi4_exit>:
 b52:	08 95       	ret

00000b54 <__udivmodsi4>:
 b54:	a1 e2       	ldi	r26, 0x21	; 33
 b56:	1a 2e       	mov	r1, r26
 b58:	aa 1b       	sub	r26, r26
 b5a:	bb 1b       	sub	r27, r27
 b5c:	fd 01       	movw	r30, r26
 b5e:	0d c0       	rjmp	.+26     	; 0xb7a <__udivmodsi4_ep>

00000b60 <__udivmodsi4_loop>:
 b60:	aa 1f       	adc	r26, r26
 b62:	bb 1f       	adc	r27, r27
 b64:	ee 1f       	adc	r30, r30
 b66:	ff 1f       	adc	r31, r31
 b68:	a2 17       	cp	r26, r18
 b6a:	b3 07       	cpc	r27, r19
 b6c:	e4 07       	cpc	r30, r20
 b6e:	f5 07       	cpc	r31, r21
 b70:	20 f0       	brcs	.+8      	; 0xb7a <__udivmodsi4_ep>
 b72:	a2 1b       	sub	r26, r18
 b74:	b3 0b       	sbc	r27, r19
 b76:	e4 0b       	sbc	r30, r20
 b78:	f5 0b       	sbc	r31, r21

00000b7a <__udivmodsi4_ep>:
 b7a:	66 1f       	adc	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	1a 94       	dec	r1
 b84:	69 f7       	brne	.-38     	; 0xb60 <__udivmodsi4_loop>
 b86:	60 95       	com	r22
 b88:	70 95       	com	r23
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	9b 01       	movw	r18, r22
 b90:	ac 01       	movw	r20, r24
 b92:	bd 01       	movw	r22, r26
 b94:	cf 01       	movw	r24, r30
 b96:	08 95       	ret

00000b98 <__umulhisi3>:
 b98:	a2 9f       	mul	r26, r18
 b9a:	b0 01       	movw	r22, r0
 b9c:	b3 9f       	mul	r27, r19
 b9e:	c0 01       	movw	r24, r0
 ba0:	a3 9f       	mul	r26, r19
 ba2:	70 0d       	add	r23, r0
 ba4:	81 1d       	adc	r24, r1
 ba6:	11 24       	eor	r1, r1
 ba8:	91 1d       	adc	r25, r1
 baa:	b2 9f       	mul	r27, r18
 bac:	70 0d       	add	r23, r0
 bae:	81 1d       	adc	r24, r1
 bb0:	11 24       	eor	r1, r1
 bb2:	91 1d       	adc	r25, r1
 bb4:	08 95       	ret

00000bb6 <__udivmodhi4>:
 bb6:	aa 1b       	sub	r26, r26
 bb8:	bb 1b       	sub	r27, r27
 bba:	51 e1       	ldi	r21, 0x11	; 17
 bbc:	07 c0       	rjmp	.+14     	; 0xbcc <__udivmodhi4_ep>

00000bbe <__udivmodhi4_loop>:
 bbe:	aa 1f       	adc	r26, r26
 bc0:	bb 1f       	adc	r27, r27
 bc2:	a6 17       	cp	r26, r22
 bc4:	b7 07       	cpc	r27, r23
 bc6:	10 f0       	brcs	.+4      	; 0xbcc <__udivmodhi4_ep>
 bc8:	a6 1b       	sub	r26, r22
 bca:	b7 0b       	sbc	r27, r23

00000bcc <__udivmodhi4_ep>:
 bcc:	88 1f       	adc	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	5a 95       	dec	r21
 bd2:	a9 f7       	brne	.-22     	; 0xbbe <__udivmodhi4_loop>
 bd4:	80 95       	com	r24
 bd6:	90 95       	com	r25
 bd8:	bc 01       	movw	r22, r24
 bda:	cd 01       	movw	r24, r26
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
